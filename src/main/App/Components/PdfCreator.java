package Components;

import Database.HibernateClasses.Photo;
import Database.HibernateClasses.User;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Date;
import java.util.List;

/**
 * Class that is used to create a photo album in the form of a pdf file
 */
public final class PdfCreator {

    private static Document document;
    private static List<Photo> photos;
    private static String albumName;

    private static Font smallFont = new Font(Font.FontFamily.TIMES_ROMAN, 16, Font.BOLD);
    private static Font headerFont = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);
    /**
     * Private constructor to hinder creation of utility class
     */
    private PdfCreator() {
        throw new IllegalStateException("Can not make instance of utility class");
    }

    /**
     * Creates a new pdf document with all the photos, author name, and album name.
     * @param AlbumPhotos all the photos in the album that is getting made into a Pdf.
     * @param saveLocation is where the Pdf is going to be saved.
     * @param name is the name of the album.
     * @throws IOException
     * @throws DocumentException
     */
    public static void createPdf(List<Photo> AlbumPhotos, String saveLocation, String name) throws IOException, DocumentException {
        photos = AlbumPhotos;
        albumName = name;
        document = new Document();
        PdfWriter.getInstance(document, new FileOutputStream(saveLocation));

        document.open();
        addHeader();
        addImagesContainer();

        document.close();
    }

    /**
     * Adds the header to the Pdf document.
     * @throws DocumentException
     */
    private static void addHeader() throws DocumentException {
        Paragraph headline = new Paragraph();
        addEmptyLineTo(headline, 1);

        headline.add(new Paragraph(albumName, headerFont));
        addEmptyLineTo(headline, 1);

        headline.add(new Paragraph("Generated by: " + UserInfo.getUser().getUsername() + ", " + new Date(), smallFont));
        addEmptyLineTo(headline, 2);

        document.add(headline);
    }

    /**
     * Adds the image container to the pdf document.
     * @throws DocumentException
     * @throws IOException
     */
    private static void addImagesContainer() throws DocumentException, IOException {
        Paragraph imagesContainer = new Paragraph();
        addEmptyLineTo(imagesContainer, 1);
        
        Paragraph images = new Paragraph("Images", smallFont);
        addEmptyLineTo(images, 1);
        
        imagesContainer.add(images);
        document.add(imagesContainer);
        addAllImages();
    }

    /**
     * Adds all the images to the Pdf document.
     * @throws DocumentException
     * @throws IOException
     */
    private static void addAllImages() throws DocumentException, IOException {
        for (Photo photo: photos) {
            Paragraph photoBox = new Paragraph();
            Paragraph imageBox = new Paragraph();

            Image image = Image.getInstance(photo.getUrl());
            scaleImage(image);
            imageBox.add(image);

            Paragraph titleBox = new Paragraph(photo.getTitle());

            photoBox.add(0,titleBox);
            photoBox.add(1, imageBox);
            addEmptyLineTo(photoBox, 2);
            document.add(photoBox);
        }
    }

    /**
     * Scales the images according to the ratio between the height and the width of the image.
     * @param image the image that is getting scaled.
     */
    private static void scaleImage(Image image) {
        if (image.getWidth() > image.getHeight()) {
            image.scaleToFit(300, 600);
        } else {
            image.scaleToFit(600, 300);
        }
    }

    /**
     * Add an empty line to the Pdf document.
     *
     * @param paragraph the paragraph to insert an empty line into.
     * @param number the number of empty lines desired.
     */
    private static void addEmptyLineTo(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }
}
